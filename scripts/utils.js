/** * Created by lzq on 2017/8/24. */const path = require('path');const config = require('../config');const ExtractTextPlugin = require('extract-text-webpack-plugin');exports.assetsPath = function (_path) {  // webpack.base.conf中处理图片都用到了    const assetsSubDirectory = process.env.NODE_ENV === 'production'    // 无论什么环境 都是 static目录        ? config.build.assetsSubDirectory        : config.dev.assetsSubDirectory    return path.posix.join(assetsSubDirectory, _path)   // 处理一些图片什么的静态文件 在static下输出目录 剩下子目录由_patch指定}exports.cssLoaders = function (options) {    options = options || {}    const cssLoader = {        loader: 'css-loader',        options:{            minimize: process.env.NODE_ENV === 'production',            sourceMap: options.sourceMap        }    };    function generateLoaders (loader, loaderOptions) {        const loaders = [cssLoader];        if (loader) {            loaders.push({                loader: loader + '-loader',                options: Object.assign({}, loaderOptions, {                   // sourceMap: options.sourceMap                })            })        }        if(options.extract){            return ExtractTextPlugin.extract({                use: loaders,                fallback: 'vue-style-loader'            });        } else {            return ['vue-style-loader'].concat(loaders);        }    }    return {        css: generateLoaders(),        postcss: generateLoaders(),        less: generateLoaders('less'),        sass: generateLoaders('sass'),        scss: generateLoaders('scss'),        stylus: generateLoaders('stylus'),        styl: generateLoaders('stylus')    }};exports.styleLoaders = function(options){    const output = [];    let loaders = exports.cssLoaders(options);    for (const extension in loaders){        let loader = loaders[extension];        output.push({            test: new RegExp('\\.' + extension + '$'),            use: loader        });    }    return output;}