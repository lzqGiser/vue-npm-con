const baseWebpackConfig = require('./webpack.base.conf');const path = require('path');const config = require('../../config');const merge = require('webpack-merge');const HtmlWebpackPlugin = require('html-webpack-plugin');const CopyWebpackPlugin = require('copy-webpack-plugin');const globPromise = require('../fileOperate/glob-await');async function handleDev(){    let entrys = {};    let devConfig;    let files = await globPromise('example/entry/*.js');    files.forEach(function(item){        const value = './' + item;        const arrItem = item.split('/');        const key = arrItem[arrItem.length-1].split('.')[0];        entrys[key] = value;    });    baseWebpackConfig.entry = entrys;    devConfig = merge(baseWebpackConfig, {        output:{            path: config.build.assetsExpRoot,  // build/example            filename: 'js/[name].js',            library:'lib',            libraryTarget:'umd'        },        devtool:'#source-map',        plugins: [            new CopyWebpackPlugin([                {                    from: path.resolve(__dirname, '../../src/static'),                    to: config.build.assetsStatic,                    ignore: ['.*']                }            ])        ]    });    Object.keys(entrys).forEach(function(entryName){        devConfig.plugins.push(new HtmlWebpackPlugin({            filename: entryName + '.html',            template: 'example/index.html',            chunks: [entryName]        }))    });    return devConfig;}module.exports = async()=>{    return await handleDev();};