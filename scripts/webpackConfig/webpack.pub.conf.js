/** * Created by lzq on 2017/8/28. */const path = require('path');const utils = require('./../utils');const webpack = require('webpack');const config = require('../../config/index');const merge = require('webpack-merge');const baseWebpackConfig = require('./webpack.base.conf.js');// const ExtractTextPlugin = require('extract-text-webpack-plugin') //用于抽离css为独立的css文件// const OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')  // 最小化css文件，合并相似的css内容const CopyWebpackPlugin = require('copy-webpack-plugin')  // 用于复制一个文件到另一个地方const components = require('../../components.json');const env = process.env.NODE_ENV === 'testing'    ? require('../config/test.env')    : config.build.env;   // productionconst webpackConfig = merge(baseWebpackConfig, {    entry: components,               //{index:'./src/index.js'},    module: {        rules: utils.styleLoaders({            sourceMap: config.build.productionSourceMap            //extract:true  // 不抽离css        })    },    output:{        path: config.build.assetsRoot,        filename: '[name].js',   // [name].[chunkhash].js  chunkhash 包hash        library:'hellooo',    // 很重要哦        libraryTarget:'umd'  // 用来兼容common.js AMD等模式, 必须配置，否则会报错（无法引入）    },    plugins:[        new webpack.DefinePlugin({            'process.env': env        }),        // extract css into its own file        // new ExtractTextPlugin({   // extract-text-webpack-plugin插件提取css到独立的文件中        //     filename: utils.assetsPath('css/[name].css')  // filename配置生成的独立css文件的文件名称和路径        // }),        // Compress extracted CSS. We are using this plugin so that possible        // duplicated（复制） CSS from different components can be deduped（推理        // new OptimizeCSSPlugin({    // 最小化css文件， 注意和上面的最小化js文件不是一回事儿        //     cssProcessorOptions: {        //         safe: true        //     }        // }),        new CopyWebpackPlugin([   // 复制指定资源到一个位置  这里主要是static的静态资源，比如图片等<对应于static目录>            {                from: path.resolve(__dirname, '../../static'),  // 从和src同级的static目录                to: config.build.assetsStatic,     //                ignore: ['.*']            }        ])    ]});module.exports = webpackConfig;