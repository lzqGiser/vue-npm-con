/** * Created by lzq on 2017/8/24. */const config = require('../config');if(!process.env.NODE_ENV){    process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV);}const opn = require('opn');const path = require('path');const express = require('express');const webpack = require('webpack');const webpackConfig = process.env.NODE_ENV === 'testing'    ? require('./webpackConfig/webpack.pub.conf.js')    : require('./webpackConfig/webpack.dev.conf.js');webpackConfig().then(function(webpackConfig){    const port = process.env.PORT || config.dev.port;    const autoOpenBrowser = !!config.dev.autoOpenBrowser;    const app = express();    const compiler = webpack(webpackConfig);    const devMiddleware = require('webpack-dev-middleware')(compiler,{        publicPath: webpackConfig.output.publicPath,  // "／"        quiet: true    })    const hotMiddleware = require('webpack-hot-middleware')(compiler, {        log: () => {}    });    compiler.plugin('compilation', function (compilation) {        compilation.plugin('html-webpack-plugin-after-emit', function (data, cb){            hotMiddleware.publish({                action: 'reload'            });            cb()        })    });    app.use(require('connect-history-api-fallback')());    app.use(devMiddleware);    app.use(hotMiddleware);    const uri = 'http://localhost:' + port; //+ '/example';    let _resolve    const readyPromise = new Promise(resolve => {        _resolve = resolve    })    console.log('> Starting dev server...')    devMiddleware.waitUntilValid(() => {        console.log('> Listening at ' + uri + '\n')        // when env is testing, don't need open it        if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {            opn(uri)        }        _resolve()    })    const router = new express.Router();    // 有待升级点： mock-data数据的自动发布功能； 添加的mock数据文件自动发布到服务端；glob文件操作；    const getData = require('./../mock-data/example.json');    router.get('/pages',function(req,res){        res.send(JSON.stringify(getData))    });    app.use(router);    const server = app.listen(port);    // module.exports = {    //     ready: readyPromise,    //     close: () => {    //         server.close()    //     }    // };})