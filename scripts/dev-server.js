/** * Created by lzq on 2017/8/24. */const config = require('../config');// dev-server.js 顾名思义，就是说开发时候使用if(!process.env.NODE_ENV){    process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV);  // 设置process.env.NODE_ENV为development}const opn = require('opn');const path = require('path');const express = require('express');const webpack = require('webpack');// 代理这块儿没有写const webpackConfig = process.env.NODE_ENV === 'testing'    ? require('./webpackConfig/webpack.pub.conf.js')    : require('./webpackConfig/webpack.dev.conf.js');const port = process.env.PORT || config.dev.port;const autoOpenBrowser = !!config.dev.autoOpenBrowser;// 代理没有配置const app = express();const compiler = webpack(webpackConfig);// console.log(webpackConfig.output.publicPath)const devMiddleware = require('webpack-dev-middleware')(compiler,{    publicPath: webpackConfig.output.publicPath,   // dev 下  ／example    quiet: true})const hotMiddleware = require('webpack-hot-middleware')(compiler, {  // webpack-hot-middleware和上面的webpack-dev-middleware是关键    log: () => {}})compiler.plugin('compilation', function (compilation) {  //    compilation.plugin('html-webpack-plugin-after-emit', function (data, cb){        hotMiddleware.publish({            action: 'reload'        });        cb()    })});app.use(require('connect-history-api-fallback')());  // express用来支持单页面应用的中间件 配合前端路由 作用是什么？？app.use(devMiddleware);app.use(hotMiddleware);const uri = 'http://localhost:' + port + '/example';let _resolveconst readyPromise = new Promise(resolve => {    _resolve = resolve})console.log('> Starting dev server...')devMiddleware.waitUntilValid(() => {    console.log('> Listening at ' + uri + '\n')    // when env is testing, don't need open it    if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {        opn(uri)   // 浏览器自动打开http://localhost:8080页面    }    _resolve()})// 引入路由const router = new express.Router();// 本地数据mockconst getData = require('./../mock-data/pages.json');router.get('/pages',function(req,res){    res.send(JSON.stringify(getData))});app.use('/example',router);  // 服务器启动的时候的打开页面 和浏览器有关系，这里指定express打开的时候 加载example下的index.htmlconst server = app.listen(port);module.exports = {    ready: readyPromise,    close: () => {        server.close()    }};